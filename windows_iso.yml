---
- name: Initialize disk, mount ISO, and run setup.exe on Windows
  hosts: all
  gather_facts: false
  tasks:
    - name: Get disk numbers with raw partitions
      ansible.windows.win_shell: |
        # Get all disks
        $disks = Get-Disk

        # Initialize an array to store disk numbers with raw partitions
        $rawDiskNumbers = @()

        # Loop through each disk
        foreach ($disk in $disks) {
            # Check if the disk is online and initialized
            if ($disk.IsOffline -eq $false -and $disk.PartitionStyle -ne "RAW") {
                try {
                    # Get partitions on the current disk
                    $partitions = Get-Partition -DiskNumber $disk.Number -ErrorAction Stop

                    # Check if any partition is raw (no file system)
                    $rawPartitions = $partitions | Where-Object { $_.Type -eq "RAW" }

                    # If raw partitions exist, add the disk number to the array
                    if ($rawPartitions) {
                        $rawDiskNumbers += $disk.Number
                    }
                } catch {
                    # Handle errors (e.g., no partitions found)
                    Write-Warning "No partitions found on Disk $($disk.Number) or an error occurred."
                }
            } else {
                Write-Warning "Disk $($disk.Number) is offline or not initialized."
            }
        }

        # Output the disk numbers with raw partitions
        if ($rawDiskNumbers.Count -gt 0) {
            Write-Output "Disk numbers with raw partitions: $($rawDiskNumbers -join ', ')"
        } else {
            Write-Output "No disks with raw partitions found."
        }
      register: raw_disks_result

    - name: Convert get_disk_output to json
      ansible.builtin.debug:
        msg: "{{ raw_disks_result }}"

...
    # - name: Initialize the disk and bring it online
    #   ansible.windows.win_shell: |
    #     Initialize-Disk -Number 1 -PartitionStyle GPT -PassThru
    #     Set-Disk -Number 1 -IsOffline $false
    #   register: disk_init

    # - name: Debug disk initialization result
    #   ansible.builtin.debug:
    #     var: disk_init.stdout_lines

    # - name: Create a new partition on the disk
    #   ansible.windows.win_shell: |
    #     New-Partition -DiskNumber 1 -UseMaximumSize -AssignDriveLetter
    #   register: partition_create

    # - name: Debug partition creation result
    #   ansible.builtin.debug:
    #     var: partition_create.stdout_lines

    # - name: Get the drive letter of the new partition
    #   ansible.windows.win_shell: |
    #     Get-Partition -DiskNumber 1 | Select-Object -ExpandProperty DriveLetter
    #   register: drive_letter_result

    # - name: Set the drive letter as a fact
    #   ansible.builtin.set_fact:
    #     drive_letter: "{{ drive_letter_result.stdout_lines | first }}"

    # - name: Debug drive letter
    #   ansible.builtin.debug:
    #     var: drive_letter

    # - name: Mount the ISO file using PowerShell
    #   ansible.windows.win_shell: |
    #     $isoPath = '{{ drive_letter }}:\path\to\your.iso'  # Replace with the correct ISO path
    #     $mountResult = Mount-DiskImage -ImagePath $isoPath -PassThru
    #     $isoDriveLetter = ($mountResult | Get-Volume).DriveLetter
    #     Write-Output "ISO mounted at: $isoDriveLetter"
    #   register: mount_result

    # - name: Debug mount result
    #   ansible.builtin.debug:
    #     var: mount_result.stdout_lines

    # - name: Get the mounted ISO drive letter
    #   ansible.builtin.set_fact:
    #     iso_drive_letter: "{{ mount_result.stdout_lines | select('search', 'ISO mounted at:') | first | regex_replace('ISO mounted at: ', '') }}"

    # - name: Run setup.exe from the mounted ISO
    #   ansible.windows.win_command: '{{ iso_drive_letter }}:\setup.exe'
    #   args:
    #     chdir: '{{ iso_drive_letter }}:'
    #   register: setup_output

    # - name: Display setup.exe output
    #   ansible.builtin.debug:
    #     var: setup_output.stdout_lines

    # - name: Unmount the ISO file using PowerShell
    #   ansible.windows.win_shell: |
    #     $isoPath = '{{ drive_letter }}:\path\to\your.iso'  # Replace with the correct ISO path
    #     Dismount-DiskImage -ImagePath $isoPath
    #   register: unmount_result

    # - name: Debug unmount result
    #   ansible.builtin.debug:
    #     var: unmount_result.stdout_lines